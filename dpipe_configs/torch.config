from functools import partial

import dpipe.commands as commands
from dpipe.config import if_missing, run, lock_experiment_dir
from dpipe.medim.io import ConsoleArguments, load_json
from dpipe.experiment import flat
from dpipe.torch import save_model_state, load_model_state, train_step
from dpipe.train import train as train_base
from dpipe.train.checkpoint import CheckpointManager
from dpipe.train.logging import TBLogger
from dpipe.train.policy import Policy
from dpipe.train.validator import compute_metrics

# paths
train_ids = load_json('train_ids.json')
val_ids = load_json('val_ids.json')
test_ids = load_json('test_ids.json')
checkpoints_path = 'checkpoints'
saved_model_path = 'model.pth'
log_path = 'train_logs'

# building
console = ConsoleArguments()
config_path = console(config_path=__file__)
experiment_path = console.experiment_path
build_experiment = flat(split, config_path, experiment_path)

# evaluation
val_metrics = {}
val_predict = predict
validate_step = partial(
    compute_metrics, val_predict, load_x, load_y, val_ids, val_metrics,
)

predict_to_dir = lambda ids, output_path: (
    load_model_state(architecture, saved_model_path),
    commands.predict(
        ids=ids, output_path=output_path, load_x=load_x, predict_fn=predict,
    ))

# training
train_kwargs = dict(lr=lr, architecture=architecture, optimizer=optimizer, criterion=criterion)
logger = TBLogger(log_path)
checkpoint_manager = CheckpointManager(checkpoints_path, {
    **{k: v for k, v in train_kwargs.items() if isinstance(v, Policy)},
    'model.pth': architecture, 'optimizer.pth': optimizer
})
train = train_base(
    train_step, batch_iter, n_epochs, logger, checkpoint_manager, validate_step, **train_kwargs
)

test_predictions_path = 'test_predictions'
run_train_predict = run_experiment = (
    lock_experiment_dir(),
    if_missing(lambda p: run(train, save_model_state(architecture, p)), saved_model_path),
    if_missing(partial(predict_to_dir, ids=test_ids), output_path=test_predictions_path)
)
