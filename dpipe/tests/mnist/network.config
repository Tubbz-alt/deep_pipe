from dpipe_configs.assets.model.torch_model import *

from torch.nn import functional
import torch
from torch import nn

from dpipe import layers

cuda = torch.cuda.is_available()

kernel_size = 3
activation = nn.ReLU()
structure = [32, 32, 64, 64]
n_features = 10

model_core = nn.Sequential(
    nn.Conv2d(1, structure[0], kernel_size),
    activation,
    layers.make_pipeline(structure, partial(layers.ResBlock2d, kernel_size=kernel_size, activation=activation)),
    layers.PyramidPooling(functional.max_pool2d),
    nn.Linear(structure[-1], 16),
    activation,
    nn.Linear(16, n_features)
)

logits2loss = nn.CrossEntropyLoss()
logits2pred = nn.Softmax(-1)
optimize = torch.optim.Adam
