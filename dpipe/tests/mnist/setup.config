from dpipe_configs.torch import *
from .network import *

from pathlib import Path

from sklearn.metrics import accuracy_score, recall_score, precision_score
from dpipe.torch import inference_step
from dpipe.train import TimeProfiler, ConsoleLogger
from dpipe.batch_iter import Infinite, load_by_random_id
from dpipe.split import train_val_test_split

from dpipe.tests.mnist.resources import MNIST

dataset = MNIST('~/tests/MNIST')
load_x = dataset.load_image
load_y = dataset.load_label

lr = 1e-3
n_epochs = 3
batch_iter = Infinite(
    load_by_random_id(load_x, load_y, ids=dataset.ids),
    batches_per_epoch=20, batch_size=100
)


def predict(image):
    return inference_step(image[None], architecture=architecture, activation=activation).argmax()


val_metrics = metrics = {
    'accuracy': accuracy_score,
    'precision': partial(precision_score, average='weighted'),
    'recall': partial(recall_score, average='weighted'),
}

run_experiment = (
    run_train_predict,
    commands.evaluate_aggregated_metrics(load_y, metrics, test_predictions_path, 'test_metrics')
)
validate_step = None
train_kwargs = dict(lr=lr, architecture=architecture, optimizer=optimizer, criterion=criterion, time=TimeProfiler())

# take 2 first folds
split = train_val_test_split(dataset.ids, val_size=1, n_splits=20)[:2]
experiment_path = Path('~/tests/MNIST/mnist-baseline').expanduser()

logger = ConsoleLogger()
