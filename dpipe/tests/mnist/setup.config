from dpipe_configs.assets.core import *
from .network import *

import sklearn
from pathlib import Path

from dpipe.train.policy import Constant
from dpipe.medim.io import dump_json
from dpipe.batch_iter.sources import load_by_random_id
from dpipe.medim.metrics import convert_to_aggregated
from dpipe.batch_iter import make_infinite_batch_iter
from dpipe.split import train_val_test_split

from dpipe.tests.mnist.resources import MNIST

dataset = MNIST('~/tests/MNIST')
load_x = dataset.load_image
load_y = dataset.load_label

lr_policy = Constant(1e-3)
n_epochs = 10
batch_iter = make_infinite_batch_iter(
    load_by_random_id(load_x, load_y, ids=dataset.ids),
    n_iters_per_epoch=20, batch_size=100
)


def predict(image):
    return model.do_inf_step(image[None, None]).argmax()


predict_to_dir = lambda ids, output_path: dump_json({i: predict(load_x(i)) for i in ids}, output_path)

metrics = {
    'accuracy': sklearn.metrics.accuracy_score,
    'precision': partial(sklearn.metrics.precision_score, average='weighted'),
    'recall': partial(sklearn.metrics.recall_score, average='weighted'),
}
val_metrics = convert_to_aggregated(metrics, key_prefix='mean_')

# take 2 first folds
split = train_val_test_split(dataset.ids, val_size=.5, n_splits=20)[:2]
experiment_path = Path('~/tests/MNIST/mnist-baseline').expanduser()
